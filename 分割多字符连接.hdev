<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('D:/sxl/Halcon/多字符连接', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">                   read_image (Image, ImageFiles[Index])</l>
<l>                   get_image_size (Image, Width, Height)</l>
<l>                   dev_clear_window()</l>
<l>                   dev_close_window()</l>
<c>                   </c>
<l>                   threshold (Image, Region, 0, 128)                               </l>
<c>                   *计算一个区域的骨架。</c>
<l>                   skeleton (Region, Skeleton_Draw)              </l>
<l>                   dilation_rectangle1 (Skeleton_Draw, RegionDilation, 2, 2)</l>
<l>                   difference (Region, RegionDilation, RegionDifference)</l>
<l>                   dev_clear_window()</l>
<l>                   dev_display(RegionDifference)</l>
<l>                   region_to_bin (RegionDifference, BinImage, 0, 255, Width, Height)</l>
<l>                   threshold (BinImage, Region2, 0, 255)</l>
<l>                   gray_projections ( Region2, BinImage, 'simple', HorProjection, VertProjection)   //获取每个区域垂直和水平方向的投影</l>
<c>                   </c>
<c>                   *------------确定每个字符的范围------------------------</c>
<l>                   VerNum:=|VertProjection|</l>
<l>                   TupleBegin:=[VerNum]                                                         //字符开始数组</l>
<l>                   TupleEnd:=[VerNum]                                                            //字符结束数组</l>
<l>                   iTupeID:=0                                                                              //数组下标</l>
<l>                   Rectangle_Row1:=[VerNum]                                                //矩形上</l>
<l>                   Rectangle_Col1:=[VerNum]                                                  //矩形下 </l>
<l>                   Rectangle_Row2:=[VerNum]                                                //矩形左</l>
<l>                   Rectangle_Col2:=[VerNum]                                                  //矩形右</l>
<l>                   ibegin:=666666                                                                     //字符开始</l>
<l>                   iend:=666666                                                                        //字符结束</l>
<l>                   tuple_select_range (VertProjection, VerNum/3, VerNum-VerNum/3, Selected)</l>
<l>                   tuple_max (Selected, Max)</l>
<l>                   MinVal:=2                                                                               //字符间分割的判断值             </l>
<l>                   MinRange:=10                                                                       //字符间分割的最小间隔</l>
<l>                   for Id := 0 to (VerNum-1) by 1</l>
<l>                                      val:=255-VertProjection[Id]</l>
<l>                                      if(val&gt;MinVal and ibegin==666666)</l>
<l>                                                         ibegin:=Id</l>
<l>                                      elseif(val&gt;MinVal and ibegin!=666666)</l>
<l>                                                         aa:=0    //无关操作</l>
<l>                                      elseif(val&lt;MinVal and ibegin!=666666)</l>
<l>                                                         if((Id-ibegin)&gt;=MinRange)</l>
<l>                                                                            iend:=Id</l>
<l>                                                                            Rectangle_Row1[iTupeID]:=0               //上</l>
<l>                                                                            Rectangle_Col1[iTupeID]:=ibegin         //左</l>
<l>                                                                            Rectangle_Row2[iTupeID]:=Height      //下</l>
<l>                                                                            Rectangle_Col2[iTupeID]:=iend            //右</l>
<l>                                                                            TupleBegin[iTupeID]:=ibegin</l>
<l>                                                                            TupleEnd[iTupeID]:=iend</l>
<l>                                                                            iTupeID:=iTupeID+1</l>
<l>                                                                            ibegin:=666666                                      //字符开始</l>
<l>                                                                            iend:=666666                                        //字符结束</l>
<l>                                                         endif</l>
<l>                                      elseif(val&lt;MinVal and ibegin==666666)</l>
<l>                                                         aa:=0    //无关操作</l>
<l>                                      else</l>
<l>                                                         aa:=0    //error</l>
<l>                                      endif</l>
<l>                   endfor</l>
<l>                   gen_rectangle1 (Rectangle, Rectangle_Row1, Rectangle_Col1, Rectangle_Row2, Rectangle_Col2)    //每个字符的矩形</l>
<c>                   *------------确定每个字符的范围------------------------</c>
<c>                   </c>
<c>                                      *------------画出矩形---------------------------------</c>
<c>                   </c>
<c>                   *------------整体做连通域操作--------------</c>
<l>                   dev_clear_window()</l>
<l>                   dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>                   dev_display(Image)</l>
<l>                   dev_set_color ('red')</l>
<l>                   dev_set_draw ('margin')</l>
<l>                   dev_display (Rectangle)</l>
<c>                   </c>
<l>                   dev_set_colored (12)</l>
<l>                   dev_set_draw ('fill')</l>
<l>                    String := 'D:/sxl/Halcon/多字符连接_分割效果/' +Index+'.png'</l>
<l>                    dump_window (3600, 'png', String)</l>
<l>                   a:=0</l>
<c>                   *------------画出矩形---------------------------------</c>
<c>                   </c>
<c>                   *------------画出投影---------------------------------</c>
<l>*                    WindowHeight:=255</l>
<l>*                    gen_image_const(ImageCreate,'byte',Width,Height)//生成一个图像，用byte格式</l>
<l>*                    dev_close_window ()</l>
<l>*                    dev_open_window (50, 0, Width, WindowHeight, 'black', WindowID)</l>
<l>*                    dev_display (ImageCreate)</l>
<l>*                    dev_set_color ('green')</l>
<c>                   * 显示垂直投影</c>
<l>*                    for i := 0 to |VertProjection| - 1 by 1</l>
<l>*                                       disp_line (WindowID, Height , i, 255-VertProjection[i],  i)</l>
<l>*                    endfor</l>
<l>*                    dev_open_window (0, 0, Width, Height, 'black', WindowID2)</l>
<l>*                    dev_display (Image)</l>
<l>*                    a:=0</l>
<c>                   *------------画出投影---------------------------------</c>
<c>           </c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor  //for Index := 0 to |ImageFiles| - 1 by 1</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
