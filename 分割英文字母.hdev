<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('D:/sxl/Python/eng', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<l>    get_image_size (Image, Width, Height)</l>
<c>    </c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<c>    </c>
<c>    *------------------- 投影操作------------------------------------------</c>
<l>    threshold (Image, Region1, 0, 255)</l>
<l>    smallest_rectangle1 (Region1, Row11, Column11, Row21, Column21)</l>
<l>    gray_projections (Region1, Image, 'simple', HorProjection, VertProjection)   //获取每个区域垂直和水平方向的投影</l>
<c>    </c>
<c>    *------------确定每个字符的范围------------------------</c>
<l>    VerNum:=|VertProjection|</l>
<l>    TupleBegin:=[VerNum]    //字符开始数组</l>
<l>    TupleEnd:=[VerNum]      //字符结束数组</l>
<l>    iTupeID:=0              //数组下标</l>
<l>    Rectangle_Row1:=[VerNum] </l>
<l>    Rectangle_Col1:=[VerNum] </l>
<l>    Rectangle_Row2:=[VerNum] </l>
<l>    Rectangle_Col2:=[VerNum] </l>
<l>    ibegin:=666666               //字符开始</l>
<l>    iend:=666666                 //字符结束</l>
<l>    MinVal:=6              //字符间分割的判断值</l>
<l>    MinRange:=10            //字符间分割的最小间隔</l>
<l>    for Id := 0 to (VerNum-1) by 1</l>
<l>        val:=255-VertProjection[Id]</l>
<l>        if(val&gt;MinVal and ibegin==666666)</l>
<l>            ibegin:=Id</l>
<l>        elseif(val&gt;MinVal and ibegin!=666666)</l>
<l>            aa:=0    //无关操作</l>
<l>        elseif(val&lt;MinVal and ibegin!=666666)</l>
<l>            if((Id-ibegin)&gt;=MinRange)</l>
<l>                iend:=Id</l>
<l>                Rectangle_Row1[iTupeID]:=0           //上</l>
<l>                Rectangle_Col1[iTupeID]:=ibegin      //左</l>
<l>                Rectangle_Row2[iTupeID]:=Height      //下</l>
<l>                Rectangle_Col2[iTupeID]:=iend        //右</l>
<l>                TupleBegin[iTupeID]:=ibegin</l>
<l>                TupleEnd[iTupeID]:=iend</l>
<l>                iTupeID:=iTupeID+1</l>
<l>                ibegin:=666666               //字符开始</l>
<l>                iend:=666666                 //字符结束</l>
<l>            endif</l>
<l>        elseif(val&lt;MinVal and ibegin==666666)</l>
<l>            aa:=0    //无关操作</l>
<l>        else</l>
<l>            aa:=0    //error</l>
<l>        endif</l>
<l>    endfor</l>
<c>    *------------确定每个字符的范围------------------------</c>
<c>    </c>
<c>    *------------画出矩形---------------------------------</c>
<l>    dev_display(Image)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_set_draw ('margin')</l>
<l>    gen_rectangle1 (Rectangle, Rectangle_Row1, Rectangle_Col1, Rectangle_Row2, Rectangle_Col2)</l>
<l>    dev_display (Rectangle)</l>
<c>    *------------画出矩形---------------------------------</c>
<c>    </c>
<c>    *------------画出投影---------------------------------</c>
<l>*     WindowHeight:=255</l>
<l>*     gen_image_const(ImageCreate,'byte',Width,WindowHeight)//生成一个图像，用byte格式</l>
<l>*     dev_close_window ()</l>
<l>*     dev_open_window (0, 0, Width, WindowHeight, 'black', WindowID)</l>
<l>*     dev_display (ImageCreate)</l>
<l>*     dev_set_color ('white')</l>
<c>    * 显示垂直投影</c>
<l>*     for i := 0 to |VertProjection| - 1 by 1</l>
<l>*         disp_line (WindowID, WindowHeight , i, 255-VertProjection[i],  i)</l>
<l>*     endfor</l>
<l>*     dev_open_window (0, 0, Width, Height, 'black', WindowID2)</l>
<l>*     dev_display (Image)</l>
<c>    *------------画出投影---------------------------------</c>
<c>    *------------------- 投影操作------------------------------------------</c>
<c>    </c>
<c>    *------------------- 连通域操作----------------------------------------------------------------</c>
<l>    dev_set_color ('red')</l>
<l>    dev_set_line_width (1)</l>
<l>    dev_set_draw ('fill')</l>
<l>    threshold (Image, Region, 0, 128)   //二值化</l>
<l>    connection (Region, ConnectedRegions)    //连通域</l>
<l>    sort_region (ConnectedRegions, SortedRegions, 'upper_left', 'true', 'column')    //对轮廓排序</l>
<l>    count_obj ( SortedRegions, Number_SortedRegions)    //统计连通域数量</l>
<c>    </c>
<c>    *-------------------统计每个字符宽度--------------------------</c>
<l>    region_features (SortedRegions, 'width', TupleSortedRegionsWidth)   //统计每个字符宽度</l>
<l>    tuple_sort(TupleSortedRegionsWidth,TupleSortedRegionsWidth_Sorted)  //升序排列</l>
<l>    tuple_max(TupleSortedRegionsWidth_Sorted,TupleSortedRegionsWidth_Max)      //最大值</l>
<l>    tuple_min(TupleSortedRegionsWidth_Sorted,TupleSortedRegionsWidth_Min)      //最小值</l>
<l>    Leftindex:=Number_SortedRegions/5                                          //左边范围</l>
<l>    Rightindex:=Number_SortedRegions-Number_SortedRegions/5-1                    //右边范围</l>
<l>    tuple_select_range (TupleSortedRegionsWidth_Sorted, Leftindex, Rightindex, TupleSortedRegionsWidth_Selected)  //区域选择</l>
<l>    tuple_mean(TupleSortedRegionsWidth_Selected,TupleSortedRegionsWidth_Mean)    //平均值</l>
<l>    rate:=TupleSortedRegionsWidth_Max/TupleSortedRegionsWidth_Mean-0.15</l>
<l>    JudgeVal:=TupleSortedRegionsWidth_Mean*rate                                  //判断基准值</l>
<l>    JudgeVal:=TupleSortedRegionsWidth_Max*0.7                                 //判断基准值</l>
<c>    *-------------------统计每个字符宽度--------------------------</c>
<c>    </c>
<c>    *-------------------对每个字符图片进行处理，宽度较大的单独放入文件夹-------------------------------</c>
<l>    for Id := 1 to  Number_SortedRegions by 1       //对每个连通域进行操作</l>
<l>        select_obj (SortedRegions, ObjectSelected, Id)                        //选择当前轮廓</l>
<l>        smallest_rectangle1 (ObjectSelected, Row1, Column1, Row2, Column2)    //产生最小矩形，目的是获得左上角的点坐标</l>
<l>        move_region (ObjectSelected, RegionMoved, -Row1+5, -Column1+5)        //根据左上点坐标移动区域</l>
<l>        region_features (RegionMoved, 'width', Region_Width)</l>
<l>        region_features (RegionMoved, 'height', Region_Height)</l>
<l>        region_to_bin (RegionMoved, BinImage, 0, 255, Region_Width+10, Region_Height+10)</l>
<l>        if(Region_Width&gt; JudgeVal)</l>
<l>           String := 'D:/sxl/Halcon/Halcon英文处理_宽字符图片/' +Index+'_'+ Id +'.png'</l>
<l>        else</l>
<l>           String := 'D:/sxl/Halcon/Halcon英文处理/' +Index+'_'+ Id +'.png'</l>
<l>        endif</l>
<c>        </c>
<l>        write_image (BinImage, 'png', 0, String)</l>
<c>    *-------------------对每个字符图片进行处理，宽度较大的单独放入文件夹-------------------------------        </c>
<c>        </c>
<c>        </c>
<l>    endfor   //对每个连通域进行操作</l>
<c>    *------------------- 连通域操作----------------------------------------------------------------</c>
<c>    </c>
<c>    </c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor  //for Index := 0 to |ImageFiles| - 1 by 1</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
